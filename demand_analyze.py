"""
    网络聊天室需求分析文档
    版本(v1.0)
    总结使用的技术和技术点分析-->整体结构设计-->功能分析
"""

    *程序分为客户端和服务端两部分
    *可以多个客户端同时在线操作
    *客户端负责请求发送和结果呈现，服务端负责逻辑数据处理


[1] 总结使用的技术和技术点分析
    界面:tkinter
    通信方式：tcp
    并发方案：多进程 tcp
    信息存储方式：mysql
    数据库分析：

    用户：
            user 
        用户id:
        用户name:
        用户passwd:
        用户昵称：
        用户性别：

    历史记录表：
            chat_history
        编号id:
        用户id：
        聊天对象id:
        文档text:
        日期data:
        方式send or recv:

    加好友：
            friends
        从本人id：
        从好友id：
        是否同意添加：
        
    聊天室:
            rooms
        编号id:
        房间名room_name：
        创建房间号用户id:

    聊天室用户
            room_user
        编号id：
        房间名room_name:
        用户id：

[2] 结构的设计：选择封装的方法，客户端和服务端的工作流程，具体几个功能模块

    采用MVC架构设计
    model: 用户数据／聊天记录／好友关系／群聊房间
    view:私聊界面／显示消息记录／显示好友列表／显示群聊信息
    control:用户注册请求／登录请求／添加好友／收发消息／创建群聊／
    使用类进行封装

[3] 具体功能


    开启：
        开启服务端

        开启客户端
            弹出用户登录跟注册界面
    1.注册
        客户端：点击注册，填写用户昵称，密码
                将信息发送给服务器
                得到反馈，收到登录账号
                并进入用户主界面
        服务端：接收用户注册请求,判断请求类型，对用户密码进行检验
                判断注册是否同,将客户数据插入数据，同时分配一个６位数字账号给用户
                反馈结果给客户端
    2.登录
        客户端：点击登录，输入账号跟密码，确认登录
            将信息发送给服务器
            得到服务器反馈
            如果登录成功进入用户主界面
        服务端：
            接收请求，验证客户端的账号密码
            验证成功，反馈结果给客户端

    主界面：
        包括：添加好友，
    

    3.添加好友


    4.进入聊天

    5.创建群聊

    6.进入群聊

    7.查询消息历史记录
    8.好友列表＆聊天群显示
    9.文件或图片的收发
    10.天气查询功能



   客户端：

创建连接
def tcp_socket():

def login():

def register():

配置文件：config.py

    服务端：

def tcp_socket():

def require():