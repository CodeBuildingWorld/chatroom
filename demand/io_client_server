“”“
    服务端跟客户端io说明

“”“


    注册模块：
        需求：
            客户端：点击注册，填写用户账号，用户昵称，密码，确认密码
                    将相关信息发送给服务器
                    得到反馈，收到登录账号
                    并进入用户主界面
            服务端：
                    验证客户登录信息
                    将客户数据插入数据
                    反馈结果给客户端
        
        协议：
            客户端：
                负责处理客户输入不能出现空格等
                负责两次密码的验证
                负责密码安全性判断(如输入的长度，用户账号)
            服务端：
                负责判断用户名的处理
                负责创建登录用户信息
                负责存储登录用户的信息
        通信：
            使用json进行客户端与服务端请求交互
            eg:
            msg = {'style':'R','uid':'138000000','uname':'jack'，'upwd':'11112222',}
            style : 请求方式
            uid : 用户账号
            upwd : 用户密码
            uname : 用户名(昵称)

    登录模块：
        需求
            客户端：点击登录，输入账号跟密码，确认登录
                将信息发送给服务器
                得到服务器反馈
                如果登录成功进入用户主界面
            服务端：
                接收请求，验证客户端的账号密码
                如果此客户已在别处登录，则将别处登录的剔除下线
                验证成功，反馈结果给客户端
                将用户登录在线状态保存
                通知他的其它好友已在线

        通信：
            使用json进行客户端与服务端请求交互
            eg:
            msg = {'style':'L','uid':'138000000　','upwd':'11112222'}
            style : 请求方式
            uid : 用户账号
            upwd : 用户密码

    用户初始化界面：
        需求：
            客户端：点击刷新，将刷新在线好友列表请求到服务器
                    接收服务端反馈信息，更新好友列表界面


            服务端：获取客户反馈信息
                    返回在线好友信息到服务端

        通信：
            使用json进行客户端与服务端请求交互
            eg:
             msg = {'style':'S','uid':'138000000'}



    服务端返回给客户端的协议：


    好友列表：　　
        fri_list = {'用户uid':'用户昵称',"fri_list":["好友账号":"好友昵称"],"fris_on_line":[所有在线好友]}

    离线的添加好友请求信息
        fir_add = {'style':'F','好友账号':'好友昵称'}

    客户端确认加好友后返回信息格式：
        {'style':'F',uid:'用户uid',fuid:'用户uid'，re:}

    用户离线通知：{"style":'Q','uid':'uname'}
    用户上线通知：{"style":'O','uid':'uname'}
            

        添加好友模块：
            需求：
                客户端：客户端点击添加好友请求
                        在ui窗口输入好友账号
                        不能添加自己为好友(客户端判断)
                        将请求发送给服务端
                        接收服务端反馈信息

                服务端：
                    处理添加好友处理
                    验证添加的账号
                        账号存在：转发加好友的请求
                        账号如果已经是好友，回复客户端
                        账号不存在：回复客户端账号不存在
                    转发接收验证请求
                    存储用户好友信息
            通信：
                使用json进行客户端与服务端请求交互
                eg:
                msg = {'style':'F，uid:当前用户的用户名,fuid:添加好友的用户名｝
                style : 请求方式
                uid ：当前用户的用户名
                fuid：添加好友的用户名

                客户端接收加好友的消息
                msg = {'style':'F','用户账号':'用户昵称'}

                客户端处理加好友的消息
                msg = {'style':'D','uid':"用户的账号"，'fuid':'好友的账号',"re"：’yes/no‘}
                re　表示处理的结果　yes表示同意 no　表示拒绝
                用户如果同意,将好友账号加到跟昵称加载到好友列表

                客户端收到好友请求结果
                msg = {'style':'D',"re"：’yes/no‘,'好友账号':'好友昵称'}


    4.进入聊天
        客户端私聊好友
            msg = {'style':'N','uid':'用户账号','fuid':'好友账号'，'msg':'信息'}

        服务端转发好友信息
            msg = {'style':'N','uid':'你的好友账号','fuid':'你的账号'，'msg':'信息'}
    5.创建群聊

    6.进入群聊

    7.查询消息历史记录
    8.好友列表＆聊天群显示
    9.文件或图片的收发
    10.天气查询功能


用户登录，获取好友列表
    获取在线好友


用户下线，怎么处理？
获取在线好友，通知好友






服务端模块
        创建连接
        接收客户请求：(依据请求分级处理)
            登录请求
            注册请求
            添加好友请求
            创建群请求
            私聊请求
            群聊请求

        创建群的请求

            登录请求处理
                验证登录
                存储登录信息
                用户异地登录处理
            注册请求处理
                分配账号
                验证密码
                存储用户信息

            

        聊天请求处理
            接收客户私聊消息
            转发客户私聊消息
            存储客户消息
